#version 400 core

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector;
in vec3 toCameraVector;

out vec4 out_Color;

uniform sampler2D textureSample;
uniform vec3 lightColour;
uniform float shineDamper;
uniform float reflectivity;


void main(void){
    vec3 unitNormalVector = normalize(surfaceNormal);
    vec3 unitLightVector  = normalize(toLightVector);

    float nDot1 = dot(unitNormalVector, unitLightVector);
    float brightness = max(nDot1, 0.0);
    vec3 diffuse =  brightness * lightColour;

    vec3 unitToCameraVector = normalize(toCameraVector);
    vec3 lightDirection = -unitLightVector;
    vec3 reflectedLightDirection = reflect(lightDirection, unitNormalVector);

    float specularFactor = dot(reflectedLightDirection, unitToCameraVector);
    specularFactor = max(specularFactor, 0.0);

    float dampedFactor = pow(specularFactor, shineDamper);

    vec3 finalSpecular = dampedFactor * reflectivity * lightColour;

    out_Color = vec4(diffuse, 1.0) * texture(textureSample, pass_textureCoords) + vec4(finalSpecular, 1.0);
}